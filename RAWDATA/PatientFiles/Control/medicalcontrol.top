# tablemacro below creates a table of question labels and patient specific answers. 
# all entries must be in upper case per Bruce 9.2017 
# all entries in grading tables must also be UPPER CASE to match
 
tablemacro: ^patientdata (^id $_question ^answer.KEEP_QUOTES)
$_question = ^pos(allupper $_question ) # convert questions to UPPER CASE
createfact($_question ^id ^answer)

# this function is executed once for every new user chatting with patient1

outputmacro: ^stdpatient()
^addtopic(~introductions)
$cs_control_main = ~control
$cs_control_post = ~control_post
$cs_prepass = ~xquestion
$userprompt = ^"Doctor:"
$cs_token =  #DO_ESSENTIALS 
$tokenfull =  #DO_SUBSTITUTE_SYSTEM | #DO_NUMBER_MERGE   | #DO_SPELLCHECK
$botprompt = ^"$patientTitle. $patientlastname:"

# *****************************************************

table: defaultbot (^name)
^createfact(^name defaultbot defaultbot)
DATA:
patient1

# *****************************************************

topic: ~introductions keep repeat() 

# matches every time on startup of a new conversation
t: (%input<%userfirstline) keep()   
		if (%input > 0)            
        {
		^reset(USER)
        }
		else
        {
		Hello Doctor
        }

topic: ~control system ()

# get a master copy of input then do our normal copies
u: ($cs_token=#DO_ESSENTIALS _*) $$rawinput = '_0
	if (_0) 
	{
		if (?) {$$rawinput = join($$rawinput ?)} 
		$cs_token = $tokenfull
		retry(SENTENCE)
	}
u: ($cs_token!=#DO_ESSENTIALS _*) $cs_token = #DO_ESSENTIALS 

# on startup, do introduction
u: (< \[ * q: _*1 * \] ) $q_num_external = '_0 # record query num from web service
u: (< score me > ) respond(~finalscore)
u: (< reset score  > ) reset(user) fail(INPUT)

u: (< regress >) $regression = 1 Regressing. Log(FILE LOGS/vp.txt new ) reset(TOPIC *) END(TOPIC)

u: (%more) ^fail(SENTENCE)   # added 9.6.2012 to ignore multiple questions in one input sentence so unsure how this fits with $$startInput below

# The following refine section ensures that only one variable is true at a time.
u: () refine ()  # classify input into 3 zones: present, family, past
	a: ([~role_family family]) $family = true $pasthistory = null $present = null			
	a: (!does [ever past history prior before previous ago "when were" "have you had" always]) $pasthistory = true $family = null $present = null
	a: ([%tense=present do does is are can would will might have has]) $present = true $family = null $pasthistory = null
	
u: (_[$patientfirstname? $patientlastname?]) mark(~Patient_name _0)  # note the topic should be triggerable by his name

u: (%input<%userfirstline) 
	$$starttime = %fulltime			# time of current input
	$lastInputTime = $$starttime	# consider prior input to be at current time
	$lastUnknownAnswer = -1			# no unknown answers so far
	gambit(~introductions)			# on conversation start

u: (%topic?) $$currentTopicIninput = 1 # is current topic continued in this sentence
s: () $$punctuation = .		 # note punctuation used
?: () $$punctuation = ?		  # note punctuation used

u: MAINCONTROL(_*) # main per-sentence processing

	$$userInput = '_0			# memorize what he said

	$$starttime = %fulltime		# time of current input

	$$startInput = %response 	# added 8.22.2012 per BW to handle multiple inputs (hello, what brings you in today)

	$currenttopic = %topic		# get the current topic at start of volley

	nofail(TOPIC ^rejoinder())	# try for rejoinders. might generate an answer directly from what we are looking for.

	if (%length == 0 AND %response == $$startInput  )
	{
		nofail(TOPIC ^gambit($currenttopic))  # gambit current topic since no input (usually start of conversation)
	}

	if (%response == $$startInput)  { nofail(TOPIC ^respond($currenttopic)) } # current topic tries to respond to his input

	if (%response == $$startInput)  # see if some other topic has keywords matching his input (given we have no response yet)
	{
		@8 = ^keywordtopics()	# get topics referred in input
		loop()
		{
			$$topic = first(@8subject)
			nofail(TOPIC ^respond($$topic))
			if (%response != 0) # stop when we find something to say
			{
				^end(RULE)	# we are done, this terminates the loop (not the rule)
			}
		}
	}
	 
	if (%response == $$startInput)  {nofail(TOPIC ^respond(~openingdialogue))} # if no matches yet, look in openingdialogue
	if (%response == $$startInput)  {nofail(TOPIC ^respond(~chiefcomplaint))}  # if still no matches look in chiefcomplaint
	
	if (%response == $$startInput  AND $$currentTopicIninput) { nofail(TOPIC ^gambit($currenttopic)) } # gambit current topic since keywords match current topic

	if (%response == $$startInput)  # gambit from ANY matching topic
	{
		@8 = ^keywordtopics()	# get topics referred in input
		loop()
		{
			$$topic = first(@8subject)
			nofail(TOPIC ^Gambit($$topic))	# gambit in best matching topic
			if (%response != $$startInput) # stop when we find something
			{
				^end(RULE)
			}
		}
	}
	if (%response == $$startInput) { nofail(TOPIC ^gambit($currenttopic)) } # gambit from current topic even though no keywords matched
	
	if (%response == $$startInput)  
	{ 
		@8 = ^GambitTopics()		# all topics with gambits (excluding system topics)
		loop()
		{
			$$topic = pick(@8)
			nofail(TOPIC ^Gambit($$topic))	# try a topic at random
			if (%response != $$startInput)
			{
				^end(RULE)
			}
		}
	}

	if (%response == $$startInput)  {nofail(TOPIC ^respond(~negativesymptoms))} # last ditch attempt to match in negativesymptoms
	if (%response == $$startInput)  
	{
		 ^repeat() 
		 factanswer(^"[I'm afraid I don't understand that question.]  [I'm sorry, I don't understand that question. Would you restate it?]")
	}


topic: ~control_post system()

t: (^query(direct_v ? chatoutput ? -1 ? @9 )) # get the sentences 

	$lastoutput = null

	loop()

	{

		$$tmp = ^last(@9subject) 
		$lastoutput = join($lastoutput _ $$tmp) 
	}
